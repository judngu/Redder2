{"version":3,"sources":["redder/adapters/application.js","redder/app.js","redder/controllers/posts/edit.js","redder/controllers/posts/new.js","redder/initializers/app-version.js","redder/initializers/export-application-global.js","redder/models/comment.js","redder/models/post.js","redder/router.js","redder/routes/about.js","redder/routes/application.js","redder/routes/comments.js","redder/routes/comments/index.js","redder/routes/comments/new.js","redder/routes/index.js","redder/routes/posts.js","redder/routes/posts/edit.js","redder/routes/posts/index.js","redder/routes/posts/new.js","redder/routes/posts/show.js","redder/templates/about.js","redder/templates/application.js","redder/templates/comments.js","redder/templates/comments/-form.js","redder/templates/comments/index.js","redder/templates/comments/new.js","redder/templates/index.js","redder/templates/posts.js","redder/templates/posts/-form.js","redder/templates/posts/edit.js","redder/templates/posts/index.js","redder/templates/posts/new.js","redder/templates/posts/show.js","redder/tests/adapters/application.jshint.js","redder/tests/app.jshint.js","redder/tests/controllers/posts/edit.jshint.js","redder/tests/controllers/posts/new.jshint.js","redder/tests/helpers/resolver.js","redder/tests/helpers/resolver.jshint.js","redder/tests/helpers/start-app.js","redder/tests/helpers/start-app.jshint.js","redder/tests/models/comment.jshint.js","redder/tests/models/post.jshint.js","redder/tests/router.jshint.js","redder/tests/routes/about.jshint.js","redder/tests/routes/application.jshint.js","redder/tests/routes/comments.jshint.js","redder/tests/routes/comments/index.jshint.js","redder/tests/routes/comments/new.jshint.js","redder/tests/routes/index.jshint.js","redder/tests/routes/posts.jshint.js","redder/tests/routes/posts/edit.jshint.js","redder/tests/routes/posts/index.jshint.js","redder/tests/routes/posts/new.jshint.js","redder/tests/routes/posts/show.jshint.js","redder/tests/test-helper.js","redder/tests/test-helper.jshint.js","redder/tests/unit/adapters/application-test.js","redder/tests/unit/adapters/application-test.jshint.js","redder/tests/unit/controllers/posts/edit-test.js","redder/tests/unit/controllers/posts/edit-test.jshint.js","redder/tests/unit/controllers/posts/new-test.js","redder/tests/unit/controllers/posts/new-test.jshint.js","redder/tests/unit/models/comment-test.js","redder/tests/unit/models/comment-test.jshint.js","redder/tests/unit/models/comments-test.js","redder/tests/unit/models/comments-test.jshint.js","redder/tests/unit/models/post-test.js","redder/tests/unit/models/post-test.jshint.js","redder/tests/unit/routes/about-test.js","redder/tests/unit/routes/about-test.jshint.js","redder/tests/unit/routes/application-test.js","redder/tests/unit/routes/application-test.jshint.js","redder/tests/unit/routes/comments-test.js","redder/tests/unit/routes/comments-test.jshint.js","redder/tests/unit/routes/comments/index-test.js","redder/tests/unit/routes/comments/index-test.jshint.js","redder/tests/unit/routes/friends/show-test.js","redder/tests/unit/routes/friends/show-test.jshint.js","redder/tests/unit/routes/index-test.js","redder/tests/unit/routes/index-test.jshint.js","redder/tests/unit/routes/post-test.js","redder/tests/unit/routes/post-test.jshint.js","redder/tests/unit/routes/post/index-test.js","redder/tests/unit/routes/post/index-test.jshint.js","redder/tests/unit/routes/post/show-test.js","redder/tests/unit/routes/post/show-test.jshint.js","redder/tests/unit/routes/posts/edit-test.js","redder/tests/unit/routes/posts/edit-test.jshint.js","vendor/ember-cli/app-suffix.js"],"sourcesContent":["define('redder/adapters/application', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].ActiveModelAdapter.extend({\n    namespace: \"api\"\n  });\n\n});","define('redder/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', './config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  // export default App;\n  exports['default'] = App;\n  Ember['default'].View.extend({ //or Ember.Component.extend\n    didInsertElement: function () {\n      this.$().foundation(); //or Ember.$(document).foundation();\n    }\n  });\n\n});","define('redder/controllers/posts/edit', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    isValid: Ember['default'].computed(\"model.title\", \"model.description\", \"model.url\", function () {\n      return !Ember['default'].isEmpty(this.get(\"model.title\")) && !Ember['default'].isEmpty(this.get(\"model.description\")) && !Ember['default'].isEmpty(this.get(\"model.url\"));\n    }),\n    actions: {\n      save: function () {\n        if (this.get(\"isValid\")) {\n          var _this = this;\n          this.get(\"model\").save().then(function (post) {\n            _this.transitionToRoute(\"posts.show\", post);\n          });\n        } else {\n          this.set(\"errorMessage\", \"You have to fill all the fields\");\n        }\n        return false;\n      },\n      cancel: function () {\n        this.transitionToRoute(\"posts.show\", this.get(\"model\"));\n        return false;\n      }\n    }\n  });\n\n});","define('redder/controllers/posts/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    isValid: Ember['default'].computed(\"model.title\", \"model.description\", \"model.url\", function () {\n      return !Ember['default'].isEmpty(this.get(\"model.title\")) && !Ember['default'].isEmpty(this.get(\"model.description\")) && !Ember['default'].isEmpty(this.get(\"model.url\"));\n    }),\n\n    actions: {\n      save: function () {\n        if (this.get(\"isValid\")) {\n          var _this = this;\n          this.get(\"model\").save().then(function (post) {\n            _this.transitionToRoute(\"posts.show\", post);\n          });\n        } else {\n          this.set(\"errorMessage\", \"You have to fill all the fields\");\n        }\n\n        return false;\n      },\n      cancel: function () {\n        this.transitionToRoute(\"posts\");\n\n        return false;\n      }\n    }\n  });\n\n});","define('redder/initializers/app-version', ['exports', '../config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function (container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('redder/initializers/export-application-global', ['exports', 'ember', '../config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal) {\n      window[classifiedName] = application;\n    }\n  };\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('redder/models/comment', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    body: DS['default'].attr(\"string\"),\n    post: DS['default'].belongsTo(\"post\")\n  });\n\n});","define('redder/models/post', ['exports', 'ember-data'], function (exports, DS) {\n\n  'use strict';\n\n  exports['default'] = DS['default'].Model.extend({\n    title: DS['default'].attr(\"string\"),\n    description: DS['default'].attr(\"string\"),\n    url: DS['default'].attr(\"string\"),\n    comments: DS['default'].hasMany(\"comment\")\n  });\n\n});","define('redder/router', ['exports', 'ember', './config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route(\"about\");\n    this.resource(\"posts\", function () {\n      this.route(\"new\");\n      this.route(\"show\", { path: \":post_id\" });\n      this.resource(\"comments\", function () {\n        this.route(\"new\");\n      });\n      this.route(\"edit\", {\n        path: \":post_id/edit\" });\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('redder/routes/about', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('redder/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    actions: {\n      save: function () {\n        console.log(\"+---- save action bubbled up to application route\");\n        return true;\n      },\n      cancel: function () {\n        console.log(\"+---- cancel action bubbled up to application route\");\n        return true;\n      }\n    }\n  });\n\n});","define('redder/routes/comments', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('redder/routes/comments/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.modelFor(\"posts/show\").get(\"comments\");\n    }\n  });\n\n});","define('redder/routes/comments/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.store.createRecord(\"comment\", {\n        post: this.modelFor(\"posts/show\")\n      });\n    },\n    actions: {\n      save: function () {\n        var _this = this;\n        var model = this.modelFor(\"comments/new\");\n\n        model.save().then(function () {\n          _this.transitionTo(\"post.show\");\n        });\n      },\n      cancel: function () {\n        this.transitionTo(\"post.show\");\n      }\n    }\n  });\n\n});","define('redder/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    beforeModel: function () {\n      this.replaceWith(\"posts.index\");\n    }\n  });\n\n});","define('redder/routes/posts', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    actions: {\n      save: function () {\n        console.log(\"+--- save action bubbled up to posts route\");\n        return true;\n      },\n      cancel: function () {\n        console.log(\"+--- cancel action bubbled up to posts route\");\n        return true;\n      }\n    }\n  });\n\n});","define('redder/routes/posts/edit', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('redder/routes/posts/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.store.find(\"post\");\n    }\n  });\n\n});","define('redder/routes/posts/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function () {\n      return this.store.createRecord(\"post\");\n    }\n  });\n\n});","define('redder/routes/posts/show', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('redder/templates/about', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    \n\n\n    data.buffer.push(\"<div class=\\\"row\\\">\\n  <h3>About</h3>\\n    <div class=\\\"panel\\\">\\n      <h5>Redder</h5>\\n      <p>\\n        The name “Redder” comes from the fusion of Reddit and Ember. Redder was created in response to a coding challenge issued by <a href=\\\"greenfieldhq.com\\\">Greenfield</a> which involved building a app with an Ember frontend with Ember CLI with a Rails backend for the api.  The long-term goal for redder is to look as similar to the real Reddit as possible and will be a continuing project.\\n      </p>\\n      <p>\\n        Github: <a href=\\\"https://github.com/judngu/Redder2\\\">click here</a>\\n      </p>\\n    </div>\\n    <div class=\\\"panel\\\">\\n      <h5>The Creater</h5>\\n      <p>\\n        Redder was created by Judy Nguyen, a fresh <a href=\\\"launchacademy.co\\\">Launch Academy</a> graduate at the time of it's conception.  Redder is her first ember app.\\n        Please visit me <a href=\\n        \\\"http://linkedin.com/in/judngu\\\">LinkedIn</a>, <a href=\\\"http://twitter.com/judngu\\\">Twitter</a>, and <a href=\\\"http://judynguyen.me\\\">Portfolio</a> for more information.\\n      </p>\\n    </div>\\n    <div class=\\\"panel\\\">\\n      <h5>Disclaimer</h5>\\n      <p>\\n        All things Reddit belong to Reddit. Redder was just created for learning purposes. :)\\n      </p>\\n    </div>\\n\\n\\n\\n</div>\\n\");\n    \n  });\n\n});","define('redder/templates/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(\"<nav class=\\\"top-bar topbar\\\" data-topbar role=\\\"navigation\\\">\\n  <ul class=\\\"title-area inline-list\\\">\\n    <li class=\\\"name\\\">\\n      <h1><img src=\\\"http://i.imgur.com/hc5nGVe.png\\\" height=\\\"25\\\" width=\\\"25\\\"></h1>\\n    </li>\\n    <li class=\\\"name\\\">\\n      <h1>\");\n    data.buffer.push(escapeExpression((helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data},helper ? helper.call(depth0, \"Redder\", \"application\", options) : helperMissing.call(depth0, \"link-to\", \"Redder\", \"application\", options))));\n    data.buffer.push(\"</h1>\\n    </li>\\n    <li class=\\\"toggle-topbar\\\"><a href=\\\"#\\\"><span>Menu</span></a></li>\\n  </ul>\\n\\n  <section class=\\\"top-bar-section\\\">\\n    <!-- Right Nav Section -->\\n    <ul class=\\\"right\\\">\\n      <li class=\\\"active\\\">\");\n    data.buffer.push(escapeExpression((helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data},helper ? helper.call(depth0, \"Submit a link\", \"posts.new\", options) : helperMissing.call(depth0, \"link-to\", \"Submit a link\", \"posts.new\", options))));\n    data.buffer.push(\"</li>\\n    </ul>\\n\\n    <!-- Left Nav Section -->\\n    <ul class=\\\"left\\\">\\n      <li>\");\n    data.buffer.push(escapeExpression((helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data},helper ? helper.call(depth0, \"About\", \"about\", options) : helperMissing.call(depth0, \"link-to\", \"About\", \"about\", options))));\n    data.buffer.push(\"</li>\\n    </ul>\\n  </section>\\n</nav>\\n\\n\");\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/comments', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1;\n\n\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/comments/-form', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(\"<form>\\n  <h2>\");\n    stack1 = helpers._triageMustache.call(depth0, \"errorMessage\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"</h2> <fieldset>\\n  <fieldset>\\n    comment:\");\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'value': (\"model.body\")\n    },hashTypes:{'value': \"ID\"},hashContexts:{'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"</br>\\n    <button \");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"save\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n    data.buffer.push(\" class=\\\"secondary tiny\\\">Save</button>\\n    <button class=\\\"secondary tiny\\\"\");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"cancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n    data.buffer.push(\">Cancel</button>\\n  </fieldset>\\n</form>\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/comments/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, self=this;\n\n  function program1(depth0,data) {\n    \n    var buffer = '', stack1;\n    data.buffer.push(\"\\n  <tr>\\n    <td>\");\n    stack1 = helpers._triageMustache.call(depth0, \"comment.body\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"</td> <td></td>\\n    <td></td>\\n  </tr>\\n\");\n    return buffer;\n    }\n\n    data.buffer.push(\" \");\n    stack1 = helpers.each.call(depth0, \"comments\", \"in\", \"model\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/comments/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"comments/form\", options) : helperMissing.call(depth0, \"partial\", \"comments/form\", options))));\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1;\n\n\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/posts', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1;\n\n\n    data.buffer.push(\"\\n\");\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/posts/-form', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;\n\n\n    data.buffer.push(\"<div class=\\\"row\\\">\\n  <ul class=\\\"no-bullet\\\">\\n    <form \");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"save\", {hash:{\n      'on': (\"submit\")\n    },hashTypes:{'on': \"STRING\"},hashContexts:{'on': depth0},contexts:[depth0],types:[\"STRING\"],data:data})));\n    data.buffer.push(\">\\n      <h2>\");\n    stack1 = helpers._triageMustache.call(depth0, \"errorMessage\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"</h2>\\n      <li>Title: \");\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'value': (\"model.title\")\n    },hashTypes:{'value': \"ID\"},hashContexts:{'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"</li>\\n      <li>Description: \");\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'value': (\"model.description\")\n    },hashTypes:{'value': \"ID\"},hashContexts:{'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"</li>\\n      <li>URL: \");\n    data.buffer.push(escapeExpression((helper = helpers.input || (depth0 && depth0.input),options={hash:{\n      'value': (\"model.url\")\n    },hashTypes:{'value': \"ID\"},hashContexts:{'value': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"input\", options))));\n    data.buffer.push(\"</li>\\n      <li><input type=\\\"submit\\\" value=\\\"Save\\\" class=\\\"button tiny secondary\\\"/>\\n  <button class=\\\"tiny secondary\\\"\");\n    data.buffer.push(escapeExpression(helpers.action.call(depth0, \"cancel\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n    data.buffer.push(\">Cancel</button></li>\\n    </form>\\n  </ul>\\n</div>\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/posts/edit', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"posts/form\", options) : helperMissing.call(depth0, \"partial\", \"posts/form\", options))));\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/posts/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, self=this, helperMissing=helpers.helperMissing;\n\n  function program1(depth0,data) {\n    \n    var buffer = '', stack1, helper, options;\n    data.buffer.push(\"\\n    <li class=\\\"panel\\\">\");\n    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"posts.show\", \"\", options) : helperMissing.call(depth0, \"link-to\", \"posts.show\", \"\", options));\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"<br>\");\n    stack1 = (helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(4, program4, data),contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"posts.show\", \"\", options) : helperMissing.call(depth0, \"link-to\", \"posts.show\", \"\", options));\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"<br>\\n    comments (\");\n    stack1 = helpers._triageMustache.call(depth0, \"comments.length\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\")</li>\\n  \");\n    return buffer;\n    }\n  function program2(depth0,data) {\n    \n    var buffer = '', stack1;\n    data.buffer.push(\"\\n      <b>\");\n    stack1 = helpers._triageMustache.call(depth0, \"title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"<b>\");\n    return buffer;\n    }\n\n  function program4(depth0,data) {\n    \n    var buffer = '', stack1;\n    data.buffer.push(\"\\n      \");\n    stack1 = helpers._triageMustache.call(depth0, \"description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    return buffer;\n    }\n\n    data.buffer.push(\"<div class=\\\"row\\\">\\n  <ul class=\\\"no-bullet\\\">\\n  \");\n    stack1 = helpers.each.call(depth0, {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[],types:[],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n  </ul>\\n</div>\\n\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/posts/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n    data.buffer.push(escapeExpression((helper = helpers.partial || (depth0 && depth0.partial),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data},helper ? helper.call(depth0, \"posts/form\", options) : helperMissing.call(depth0, \"partial\", \"posts/form\", options))));\n    data.buffer.push(\"\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/templates/posts/show', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data) {\n  this.compilerInfo = [4,'>= 1.0.0'];\n  helpers = this.merge(helpers, Ember['default'].Handlebars.helpers); data = data || {};\n    var buffer = '', stack1, helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression, self=this;\n\n  function program1(depth0,data) {\n    \n    var buffer = '', stack1;\n    data.buffer.push(\"\\n    <li>\");\n    stack1 = helpers._triageMustache.call(depth0, \"body\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"</li>\\n  \");\n    return buffer;\n    }\n\n    data.buffer.push(\"<div class=\\\"panel\\\">\\n  <h4>\");\n    stack1 = helpers._triageMustache.call(depth0, \"model.title\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"(\");\n    stack1 = helpers._triageMustache.call(depth0, \"model.url\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\")</h4>\\n  <p>\");\n    stack1 = helpers._triageMustache.call(depth0, \"model.description\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"</p>\\n  <p>\");\n    data.buffer.push(escapeExpression((helper = helpers['link-to'] || (depth0 && depth0['link-to']),options={hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0,depth0],types:[\"STRING\",\"STRING\",\"ID\"],data:data},helper ? helper.call(depth0, \"edit\", \"posts.edit\", \"model\", options) : helperMissing.call(depth0, \"link-to\", \"edit\", \"posts.edit\", \"model\", options))));\n    data.buffer.push(\"\\n</div>\\n\\n<h5>Comments:</h5>\\n<ul>\\n  \");\n    stack1 = helpers._triageMustache.call(depth0, \"outlet\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n  \");\n    stack1 = helpers.each.call(depth0, \"comments\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n    if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n    data.buffer.push(\"\\n</ul>\\n\");\n    return buffer;\n    \n  });\n\n});","define('redder/tests/adapters/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/application.js should pass jshint', function() { \n    ok(true, 'adapters/application.js should pass jshint.'); \n  });\n\n});","define('redder/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('redder/tests/controllers/posts/edit.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/posts');\n  test('controllers/posts/edit.js should pass jshint', function() { \n    ok(true, 'controllers/posts/edit.js should pass jshint.'); \n  });\n\n});","define('redder/tests/controllers/posts/new.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers/posts');\n  test('controllers/posts/new.js should pass jshint', function() { \n    ok(true, 'controllers/posts/new.js should pass jshint.'); \n  });\n\n});","define('redder/tests/helpers/resolver', ['exports', 'ember/resolver', '../../config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('redder/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('redder/tests/helpers/start-app', ['exports', 'ember', '../../app', '../../router', '../../config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('redder/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('redder/tests/models/comment.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/comment.js should pass jshint', function() { \n    ok(true, 'models/comment.js should pass jshint.'); \n  });\n\n});","define('redder/tests/models/post.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - models');\n  test('models/post.js should pass jshint', function() { \n    ok(true, 'models/post.js should pass jshint.'); \n  });\n\n});","define('redder/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/about.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/about.js should pass jshint', function() { \n    ok(true, 'routes/about.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/application.js should pass jshint', function() { \n    ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/comments.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/comments.js should pass jshint', function() { \n    ok(true, 'routes/comments.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/comments/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/comments');\n  test('routes/comments/index.js should pass jshint', function() { \n    ok(true, 'routes/comments/index.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/comments/new.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/comments');\n  test('routes/comments/new.js should pass jshint', function() { \n    ok(true, 'routes/comments/new.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/index.js should pass jshint', function() { \n    ok(true, 'routes/index.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/posts.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/posts.js should pass jshint', function() { \n    ok(true, 'routes/posts.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/posts/edit.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/posts');\n  test('routes/posts/edit.js should pass jshint', function() { \n    ok(true, 'routes/posts/edit.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/posts/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/posts');\n  test('routes/posts/index.js should pass jshint', function() { \n    ok(true, 'routes/posts/index.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/posts/new.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/posts');\n  test('routes/posts/new.js should pass jshint', function() { \n    ok(true, 'routes/posts/new.js should pass jshint.'); \n  });\n\n});","define('redder/tests/routes/posts/show.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/posts');\n  test('routes/posts/show.js should pass jshint', function() { \n    ok(true, 'routes/posts/show.js should pass jshint.'); \n  });\n\n});","define('redder/tests/test-helper', ['./helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('redder/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/adapters/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"adapter:application\", \"ApplicationAdapter\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var adapter = this.subject();\n    ok(adapter);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('redder/tests/unit/adapters/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/adapters');\n  test('unit/adapters/application-test.js should pass jshint', function() { \n    ok(true, 'unit/adapters/application-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/controllers/posts/edit-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:posts/edit\", \"PostsEditController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/controllers/posts/edit-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/posts');\n  test('unit/controllers/posts/edit-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/posts/edit-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/controllers/posts/new-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:posts/new\", \"PostsNewController\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function () {\n    var controller = this.subject();\n    ok(controller);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/controllers/posts/new-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers/posts');\n  test('unit/controllers/posts/new-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/posts/new-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/models/comment-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"comment\", \"Comment\", {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('redder/tests/unit/models/comment-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/comment-test.js should pass jshint', function() { \n    ok(true, 'unit/models/comment-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/models/comments-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"comments\", \"Comments\", {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('redder/tests/unit/models/comments-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/comments-test.js should pass jshint', function() { \n    ok(true, 'unit/models/comments-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/models/post-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleForModel(\"post\", \"Post\", {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  ember_qunit.test(\"it exists\", function () {\n    var model = this.subject();\n    // var store = this.store();\n    ok(!!model);\n  });\n\n});","define('redder/tests/unit/models/post-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/post-test.js should pass jshint', function() { \n    ok(true, 'unit/models/post-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/about-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:about\", \"AboutRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/about-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/about-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/about-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:application\", \"ApplicationRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/application-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/application-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/comments-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:comments\", \"CommentsRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/comments-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/comments-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/comments-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/comments/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:comments/index\", \"CommentsIndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/comments/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/comments');\n  test('unit/routes/comments/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/comments/index-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/friends/show-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:friends/show\", \"FriendsShowRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/friends/show-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/friends');\n  test('unit/routes/friends/show-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/friends/show-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:index\", \"IndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/index-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/post-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:post\", \"PostRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/post-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/post-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/post-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/post/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:post/index\", \"PostIndexRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/post/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/post');\n  test('unit/routes/post/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/post/index-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/post/show-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:post/show\", \"PostShowRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/post/show-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/post');\n  test('unit/routes/post/show-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/post/show-test.js should pass jshint.'); \n  });\n\n});","define('redder/tests/unit/routes/posts/edit-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:posts/edit\", \"PostsEditRoute\", {});\n\n  ember_qunit.test(\"it exists\", function () {\n    var route = this.subject();\n    ok(route);\n  });\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('redder/tests/unit/routes/posts/edit-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/posts');\n  test('unit/routes/posts/edit-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/posts/edit-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\ndefine('redder/config/environment', ['ember'], function(Ember) {\n  var prefix = 'redder';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"redder/tests/test-helper\");\n} else {\n  require(\"redder/app\")[\"default\"].create({\"name\":\"redder\",\"version\":\"0.0.0.65136bd9\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdfile":"redder.js"}